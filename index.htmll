<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gamerbot - 2D Шутер</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { background: #0a0a1a; color: white; font-family: Arial; overflow: hidden; }
        .container { max-width: 100%; height: 100vh; display: flex; flex-direction: column; }
        .header { background: #111; padding: 15px; text-align: center; border-bottom: 2px solid #0f0; }
        .logo { font-size: 2rem; color: #0f0; margin-bottom: 5px; }
        .game-container { flex: 1; position: relative; display: flex; justify-content: center; align-items: center; }
        #gameCanvas { border: 2px solid #0f0; background: #000; max-width: 100%; max-height: 100%; }
        .controls { background: #111; padding: 15px; display: flex; justify-content: space-around; align-items: center; }
        .btn { background: #0f0; border: none; color: black; padding: 10px 20px; border-radius: 5px; cursor: pointer; font-weight: bold; }
        .stats { display: flex; gap: 20px; }
        .stat { background: #222; padding: 5px 10px; border-radius: 5px; }
        .mobile-controls { position: absolute; bottom: 100px; width: 100%; display: none; justify-content: space-around; }
        .joystick { width: 60px; height: 60px; background: rgba(0,255,0,0.3); border-radius: 50%; display: flex; justify-content: center; align-items: center; }
        .shoot-btn { width: 60px; height: 60px; background: rgba(255,0,0,0.3); border-radius: 50%; display: flex; justify-content: center; align-items: center; }
        .start-screen, .game-over-screen { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.9); display: flex; flex-direction: column; justify-content: center; align-items: center; z-index: 10; }
        .screen-title { font-size: 2rem; color: #0f0; margin-bottom: 20px; }
        @media (max-width: 768px) { .mobile-controls { display: flex; } }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">GAMERBOT 2D ШУТЕР</div>
            <div>Онлайн 60 FPS</div>
        </div>
        
        <div class="game-container">
            <canvas id="gameCanvas" width="800" height="600"></canvas>
            
            <div class="start-screen" id="startScreen">
                <h1 class="screen-title">GAMERBOT ШУТЕР</h1>
                <p>Управление: WASD/стрелки, пробел/клик стрельба</p>
                <button class="btn" onclick="startGame()">НАЧАТЬ</button>
            </div>
            
            <div class="game-over-screen" id="gameOverScreen" style="display: none;">
                <h1 class="screen-title">ИГРА ОКОНЧЕНА</h1>
                <p id="finalScore">Счет: 0</p>
                <button class="btn" onclick="restartGame()">ЗАНОВО</button>
            </div>
            
            <div class="mobile-controls">
                <div class="joystick" id="moveUp">↑</div>
                <div class="joystick" id="moveLeft">←</div>
                <div class="joystick" id="moveDown">↓</div>
                <div class="joystick" id="moveRight">→</div>
                <div class="shoot-btn" id="shootBtn">⚡</div>
            </div>
        </div>
        
        <div class="controls">
            <div class="stats">
                <div class="stat">Счет: <span id="score">0</span></div>
                <div class="stat">Жизни: <span id="health">100</span></div>
                <div class="stat">Онлайн: <span id="online">1</span></div>
            </div>
            <button class="btn" onclick="togglePause()">ПАУЗА</button>
            <a href="https://t.me/Gamerbot" class="btn" target="_blank">БОТ</a>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        let players = {};
        let bullets = [];
        let enemies = [];
        let particles = [];
        let keys = {};
        let score = 0;
        let health = 100;
        let gameRunning = false;
        let paused = false;
        let playerId = Math.random().toString(36).substr(2, 9);
        let lastUpdate = 0;
        let onlinePlayers = 1;

        // Онлайн синхронизация
        function syncGameState() {
            if (!gameRunning) return;
            
            const gameState = {
                playerId: playerId,
                x: players[playerId]?.x || 400,
                y: players[playerId]?.y || 300,
                score: score,
                health: health,
                timestamp: Date.now()
            };
            
            // Сохраняем в localStorage для имитации онлайн
            localStorage.setItem('gamerbot_game_state', JSON.stringify(gameState));
            
            // Обновляем онлайн счетчик
            onlinePlayers = 1 + Math.floor(Math.random() * 10);
            document.getElementById('online').textContent = onlinePlayers;
        }

        function loadOnlinePlayers() {
            try {
                const savedState = localStorage.getItem('gamerbot_game_state');
                if (savedState) {
                    const state = JSON.parse(savedState);
                    if (state.playerId !== playerId && Date.now() - state.timestamp < 5000) {
                        players[state.playerId] = { x: state.x, y: state.y };
                    }
                }
            } catch(e) {}
        }

        // Игровые объекты
        class Player {
            constructor(x, y) {
                this.x = x;
                this.y = y;
                this.speed = 5;
                this.size = 20;
                this.color = '#0f0';
            }
            
            draw() {
                ctx.fillStyle = this.color;
                ctx.fillRect(this.x - this.size/2, this.y - this.size/2, this.size, this.size);
                
                // Ствол
                ctx.fillStyle = '#fff';
                ctx.fillRect(this.x + this.size/2, this.y - 2, 15, 4);
            }
            
            update() {
                if (keys['ArrowLeft'] || keys['a']) this.x -= this.speed;
                if (keys['ArrowRight'] || keys['d']) this.x += this.speed;
                if (keys['ArrowUp'] || keys['w']) this.y -= this.speed;
                if (keys['ArrowDown'] || keys['s']) this.y += this.speed;
                
                // Границы
                this.x = Math.max(this.size/2, Math.min(canvas.width - this.size/2, this.x));
                this.y = Math.max(this.size/2, Math.min(canvas.height - this.size/2, this.y));
            }
        }

        class Bullet {
            constructor(x, y, dx, dy) {
                this.x = x;
                this.y = y;
                this.dx = dx;
                this.dy = dy;
                this.speed = 10;
                this.size = 4;
                this.color = '#ff0';
            }
            
            update() {
                this.x += this.dx * this.speed;
                this.y += this.dy * this.speed;
            }
            
            draw() {
                ctx.fillStyle = this.color;
                ctx.fillRect(this.x - this.size/2, this.y - this.size/2, this.size, this.size);
            }
            
            isOutOfBounds() {
                return this.x < 0 || this.x > canvas.width || this.y < 0 || this.y > canvas.height;
            }
        }

        class Enemy {
            constructor() {
                this.size = 25;
                this.speed = 2;
                this.color = '#f00';
                this.spawn();
            }
            
            spawn() {
                const side = Math.floor(Math.random() * 4);
                switch(side) {
                    case 0: this.x = -this.size; this.y = Math.random() * canvas.height; break;
                    case 1: this.x = canvas.width + this.size; this.y = Math.random() * canvas.height; break;
                    case 2: this.x = Math.random() * canvas.width; this.y = -this.size; break;
                    case 3: this.x = Math.random() * canvas.width; this.y = canvas.height + this.size; break;
                }
            }
            
            update() {
                const dx = players[playerId].x - this.x;
                const dy = players[playerId].y - this.y;
                const dist = Math.sqrt(dx * dx + dy * dy);
                
                this.x += (dx / dist) * this.speed;
                this.y += (dy / dist) * this.speed;
            }
            
            draw() {
                ctx.fillStyle = this.color;
                ctx.fillRect(this.x - this.size/2, this.y - this.size/2, this.size, this.size);
            }
        }

        class Particle {
            constructor(x, y, color) {
                this.x = x;
                this.y = y;
                this.vx = (Math.random() - 0.5) * 5;
                this.vy = (Math.random() - 0.5) * 5;
                this.life = 1;
                this.color = color;
            }
            
            update() {
                this.x += this.vx;
                this.y += this.vy;
                this.life -= 0.02;
            }
            
            draw() {
                ctx.fillStyle = this.color;
                ctx.globalAlpha = this.life;
                ctx.fillRect(this.x, this.y, 3, 3);
                ctx.globalAlpha = 1;
            }
        }

        // Управление
        document.addEventListener('keydown', (e) => { keys[e.key] = true; });
        document.addEventListener('keyup', (e) => { keys[e.key] = false; });

        canvas.addEventListener('click', (e) => {
            if (!gameRunning || paused) return;
            const rect = canvas.getBoundingClientRect();
            const mouseX = e.clientX - rect.left;
            const mouseY = e.clientY - rect.top;
            shootAt(mouseX, mouseY);
        });

        function shootAt(targetX, targetY) {
            const player = players[playerId];
            const dx = targetX - player.x;
            const dy = targetY - player.y;
            const dist = Math.sqrt(dx * dx + dy * dy);
            
            bullets.push(new Bullet(
                player.x + player.size/2,
                player.y,
                dx / dist,
                dy / dist
            ));
        }

        // Мобильное управление
        ['moveUp', 'moveLeft', 'moveDown', 'moveRight'].forEach(id => {
            const btn = document.getElementById(id);
            btn.addEventListener('touchstart', (e) => {
                e.preventDefault();
                keys[id.replace('move', 'Arrow')] = true;
            });
            btn.addEventListener('touchend', (e) => {
                e.preventDefault();
                keys[id.replace('move', 'Arrow')] = false;
            });
        });

        document.getElementById('shootBtn').addEventListener('touchstart', (e) => {
            e.preventDefault();
            if (gameRunning && !paused) {
                shootAt(Math.random() * canvas.width, Math.random() * canvas.height);
            }
        });

        // Игровой цикл
        function gameLoop(timestamp) {
            if (!gameRunning) return;
            
            const deltaTime = timestamp - lastUpdate;
            if (deltaTime < 16) { // 60 FPS
                requestAnimationFrame(gameLoop);
                return;
            }
            lastUpdate = timestamp;
            
            if (!paused) {
                update();
            }
            draw();
            
            requestAnimationFrame(gameLoop);
        }

        function update() {
            // Обновление игрока
            if (players[playerId]) {
                players[playerId].update();
            }
            
            // Обновление пуль
            bullets = bullets.filter(bullet => {
                bullet.update();
                return !bullet.isOutOfBounds();
            });
            
            // Спавн врагов
            if (Math.random() < 0.02) {
                enemies.push(new Enemy());
            }
            
            // Обновление врагов
            enemies.forEach(enemy => enemy.update());
            
            // Проверка столкновений
            checkCollisions();
            
            // Обновление частиц
            particles.forEach(particle => particle.update());
            particles = particles.filter(p => p.life > 0);
            
            // Онлайн синхронизация
            if (timestamp % 30 === 0) {
                syncGameState();
                loadOnlinePlayers();
            }
            
            document.getElementById('score').textContent = score;
            document.getElementById('health').textContent = health;
        }

        function checkCollisions() {
            const player = players[playerId];
            
            // Пули с врагами
            bullets.forEach((bullet, bulletIndex) => {
                enemies.forEach((enemy, enemyIndex) => {
                    const dx = bullet.x - enemy.x;
                    const dy = bullet.y - enemy.y;
                    const dist = Math.sqrt(dx * dx + dy * dy);
                    
                    if (dist < enemy.size/2 + bullet.size/2) {
                        // Попадание
                        for(let i = 0; i < 10; i++) {
                            particles.push(new Particle(enemy.x, enemy.y, '#ff0'));
                        }
                        enemies.splice(enemyIndex, 1);
                        bullets.splice(bulletIndex, 1);
                        score += 10;
                    }
                });
            });
            
            // Игрок с врагами
            enemies.forEach((enemy, index) => {
                const dx = player.x - enemy.x;
                const dy = player.y - enemy.y;
                const dist = Math.sqrt(dx * dx + dy * dy);
                
                if (dist < player.size/2 + enemy.size/2) {
                    for(let i = 0; i < 15; i++) {
                        particles.push(new Particle(player.x, player.y, '#f00'));
                    }
                    enemies.splice(index, 1);
                    health -= 10;
                    
                    if (health <= 0) {
                        gameOver();
                    }
                }
            });
        }

        function draw() {
            // Очистка
            ctx.fillStyle = '#000';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Рисование игроков
            Object.values(players).forEach(player => player.draw());
            
            // Рисование пуль
            bullets.forEach(bullet => bullet.draw());
            
            // Рисование врагов
            enemies.forEach(enemy => enemy.draw());
            
            // Рисование частиц
            particles.forEach(particle => particle.draw());
        }

        function startGame() {
            document.getElementById('startScreen').style.display = 'none';
            gameRunning = true;
            score = 0;
            health = 100;
            players[playerId] = new Player(400, 300);
            bullets = [];
            enemies = [];
            particles = [];
            requestAnimationFrame(gameLoop);
        }

        function gameOver() {
            gameRunning = false;
            document.getElementById('finalScore').textContent = 'Счет: ' + score;
            document.getElementById('gameOverScreen').style.display = 'flex';
        }

        function restartGame() {
            document.getElementById('gameOverScreen').style.display = 'none';
            startGame();
        }

        function togglePause() {
            paused = !paused;
        }

        // Загрузка других игроков
        setInterval(loadOnlinePlayers, 1000);
    </script>
</body>
</html>
